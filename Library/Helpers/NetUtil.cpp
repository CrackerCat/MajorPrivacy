#include "pch.h"
#include "NetUtil.h"
#include "../Common/Address.h"


const std::map<uint32, std::wstring> g_KnownProtocols = [] {
    std::map<uint32, std::wstring> KnownProtocols;
    KnownProtocols.insert(std::make_pair(0, L"HOPOPT (IPv6 Hop-by-Hop Option)"));
    KnownProtocols.insert(std::make_pair(1, L"ICMP (Internet Control Message Protocol)"));
    KnownProtocols.insert(std::make_pair(2, L"IGMP (Internet Group Management Protocol)"));
    KnownProtocols.insert(std::make_pair(3, L"GGP (Gateway-to-Gateway)"));
    KnownProtocols.insert(std::make_pair(4, L"IP (IP in IP (encapsulation))"));
    KnownProtocols.insert(std::make_pair(5, L"Stream"));
    KnownProtocols.insert(std::make_pair(6, L"TCP (Transmission Control Protocol)"));
    KnownProtocols.insert(std::make_pair(7, L"CBT (Core Based Trees)"));
    KnownProtocols.insert(std::make_pair(8, L"EGP (Exterior Gateway Protocol)"));
    KnownProtocols.insert(std::make_pair(9, L"IGP (any private interior gateway)"));
    KnownProtocols.insert(std::make_pair(10, L"BBN-RCC-MON (BBN RCC Monitoring)"));
    KnownProtocols.insert(std::make_pair(11, L"NVP-II (Network Voice Protocol)"));
    KnownProtocols.insert(std::make_pair(12, L"PUP"));
    KnownProtocols.insert(std::make_pair(13, L"ARGUS"));
    KnownProtocols.insert(std::make_pair(14, L"EMCON"));
    KnownProtocols.insert(std::make_pair(15, L"XNET (Cross Net Debugger)"));
    KnownProtocols.insert(std::make_pair(16, L"CHAOS"));
    KnownProtocols.insert(std::make_pair(17, L"UDP (User Datagram Protocol)"));
    KnownProtocols.insert(std::make_pair(18, L"Multiplexing"));
    KnownProtocols.insert(std::make_pair(19, L"DCN-MEAS (DCN Measurement Subsystems)"));
    KnownProtocols.insert(std::make_pair(20, L"HMP (Host Monitoring)"));
    KnownProtocols.insert(std::make_pair(21, L"PRM (Packet Radio Measurement)"));
    KnownProtocols.insert(std::make_pair(22, L"XNS-IDP (XEROX NS IDP)"));
    KnownProtocols.insert(std::make_pair(23, L"TRUNK-1"));
    KnownProtocols.insert(std::make_pair(24, L"TRUNK-2"));
    KnownProtocols.insert(std::make_pair(25, L"LEAF-1"));
    KnownProtocols.insert(std::make_pair(26, L"LEAF-2"));
    KnownProtocols.insert(std::make_pair(27, L"RDP (Reliable Data Protocol)"));
    KnownProtocols.insert(std::make_pair(28, L"IRTP (Internet Reliable Transaction Protocol)"));
    KnownProtocols.insert(std::make_pair(29, L"ISO-TP4 (ISO Transport Protocol Class 4)"));
    KnownProtocols.insert(std::make_pair(30, L"NETBLT (Bulk Data Transfer Protocol)"));
    KnownProtocols.insert(std::make_pair(31, L"MFE-NSP (MFE Network Services Protocol)"));
    KnownProtocols.insert(std::make_pair(32, L"MERIT-INP (MERIT Internodal Protocol)"));
    KnownProtocols.insert(std::make_pair(33, L"DCCP (Datagram Congestion Control Protocol)"));
    KnownProtocols.insert(std::make_pair(34, L"3PC (Third Party Connect Protocol)"));
    KnownProtocols.insert(std::make_pair(35, L"IDPR (Inter-Domain Policy Routing Protocol)"));
    KnownProtocols.insert(std::make_pair(36, L"XTP"));
    KnownProtocols.insert(std::make_pair(37, L"DDP (Datagram Delivery Protocol)"));
    KnownProtocols.insert(std::make_pair(38, L"IDPR-CMTP (IDPR Control Message Transport Proto)"));
    KnownProtocols.insert(std::make_pair(39, L"TP++ (TP++ Transport Protocol)"));
    KnownProtocols.insert(std::make_pair(40, L"IL (IL Transport Protocol)"));
    KnownProtocols.insert(std::make_pair(41, L"Verkapselung von IPv6- in IPv4-Pakete"));
    KnownProtocols.insert(std::make_pair(42, L"SDRP (Source Demand Routing Protocol)"));
    KnownProtocols.insert(std::make_pair(43, L"IPv6-Route (Routing Header for IPv6)"));
    KnownProtocols.insert(std::make_pair(44, L"IPv6-Frag (Fragment Header for IPv6)"));
    KnownProtocols.insert(std::make_pair(45, L"IDRP (Inter-Domain Routing Protocol)"));
    KnownProtocols.insert(std::make_pair(46, L"RSVP (Reservation Protocol)"));
    KnownProtocols.insert(std::make_pair(47, L"GRE (Generic Routing Encapsulation)"));
    KnownProtocols.insert(std::make_pair(48, L"MHRP (Mobile Host Routing Protocol)"));
    KnownProtocols.insert(std::make_pair(49, L"BNA"));
    KnownProtocols.insert(std::make_pair(50, L"ESP (Encapsulating Security Payload)"));
    KnownProtocols.insert(std::make_pair(51, L"AH (Authentication Header)"));
    KnownProtocols.insert(std::make_pair(52, L"I-NLSP (Integrated Net Layer Security TUBA)"));
    KnownProtocols.insert(std::make_pair(53, L"SWIPE (IP with Encryption)"));
    KnownProtocols.insert(std::make_pair(54, L"NARP (NBMA Address Resolution Protocol)"));
    KnownProtocols.insert(std::make_pair(55, L"MOBILE (IP Mobility)"));
    KnownProtocols.insert(std::make_pair(56, L"TLSP (Transport Layer Security Protocol)"));
    KnownProtocols.insert(std::make_pair(57, L"SKIP"));
    KnownProtocols.insert(std::make_pair(58, L"IPv6-ICMP (ICMP for IPv6)"));
    KnownProtocols.insert(std::make_pair(59, L"IPv6-NoNxt (Kein nächster Header für IPv6)"));
    KnownProtocols.insert(std::make_pair(60, L"IPv6-Opts (Destination Options for IPv6)"));
    KnownProtocols.insert(std::make_pair(61, L"Jedes Host-interne Protokoll"));
    KnownProtocols.insert(std::make_pair(62, L"CFTP"));
    KnownProtocols.insert(std::make_pair(63, L"Jedes lokale Netz"));
    KnownProtocols.insert(std::make_pair(64, L"SAT-EXPAK (SATNET and Backroom EXPAK)"));
    KnownProtocols.insert(std::make_pair(65, L"KRYPTOLAN"));
    KnownProtocols.insert(std::make_pair(66, L"RVD (MIT Remote Virtual Disk Protocol)"));
    KnownProtocols.insert(std::make_pair(67, L"IPPC (Internet Pluribus Packet Core)"));
    KnownProtocols.insert(std::make_pair(68, L"Jedes verteilte Dateisystem"));
    KnownProtocols.insert(std::make_pair(69, L"SAT-MON (SATNET Monitoring)"));
    KnownProtocols.insert(std::make_pair(70, L"VISA"));
    KnownProtocols.insert(std::make_pair(71, L"IPCV (Internet Packet Core Utility)"));
    KnownProtocols.insert(std::make_pair(72, L"CPNX (Computer Protocol Network Executive)"));
    KnownProtocols.insert(std::make_pair(73, L"CPHB (Computer Protocol Heart Beat)"));
    KnownProtocols.insert(std::make_pair(74, L"WSN (Wang Span Network)"));
    KnownProtocols.insert(std::make_pair(75, L"PVP (Packet Video Protocol)"));
    KnownProtocols.insert(std::make_pair(76, L"BR-SAT-MON (Backroom SATNET Monitoring)"));
    KnownProtocols.insert(std::make_pair(77, L"SUN-ND (SUN ND PROTOCOL-Temporary)"));
    KnownProtocols.insert(std::make_pair(78, L"WB-MON (WIDEBAND Monitoring)"));
    KnownProtocols.insert(std::make_pair(79, L"WB-EXPAK (WIDEBAND EXPAK)"));
    KnownProtocols.insert(std::make_pair(80, L"ISO-IP (ISO Internet Protocol)"));
    KnownProtocols.insert(std::make_pair(81, L"VMTP"));
    KnownProtocols.insert(std::make_pair(82, L"SECURE-VMTP"));
    KnownProtocols.insert(std::make_pair(83, L"VINES"));
    KnownProtocols.insert(std::make_pair(84, L"TTP"));
    KnownProtocols.insert(std::make_pair(85, L"NSFNET-IGP (NSFNET-IGP)"));
    KnownProtocols.insert(std::make_pair(86, L"DGP (Dissimilar Gateway Protocol)"));
    KnownProtocols.insert(std::make_pair(87, L"TCF"));
    KnownProtocols.insert(std::make_pair(88, L"EIGRP"));
    KnownProtocols.insert(std::make_pair(89, L"OSPF"));
    KnownProtocols.insert(std::make_pair(90, L"Sprite-RPC (Sprite RPC Protocol)"));
    KnownProtocols.insert(std::make_pair(91, L"LARP (Locus Address Resolution Protocol)"));
    KnownProtocols.insert(std::make_pair(92, L"MTP (Multicast Transport Protocol)"));
    KnownProtocols.insert(std::make_pair(93, L"AX.25 (AX.25 Frames)"));
    KnownProtocols.insert(std::make_pair(94, L"IPIP (IP-within-IP Encapsulation Protocol)"));
    KnownProtocols.insert(std::make_pair(95, L"MICP (Mobile Internetworking Control Pro.)"));
    KnownProtocols.insert(std::make_pair(96, L"SCC-SP (Semaphore Communications Sec. Pro.)"));
    KnownProtocols.insert(std::make_pair(97, L"ETHERIP (Ethernet-within-IP Encapsulation)"));
    KnownProtocols.insert(std::make_pair(98, L"ENCAP (Encapsulation Header)"));
    KnownProtocols.insert(std::make_pair(99, L"Jeder private Verschlüsselungsentwurf"));
    KnownProtocols.insert(std::make_pair(100, L"GMTP"));
    KnownProtocols.insert(std::make_pair(101, L"IFMP (Ipsilon Flow Management Protocol)"));
    KnownProtocols.insert(std::make_pair(102, L"PNNI (over IP)"));
    KnownProtocols.insert(std::make_pair(103, L"PIM (Protocol Independent Multicast)"));
    KnownProtocols.insert(std::make_pair(104, L"ARIS"));
    KnownProtocols.insert(std::make_pair(105, L"SCPS"));
    KnownProtocols.insert(std::make_pair(106, L"QNX"));
    KnownProtocols.insert(std::make_pair(107, L"A/N (Active Networks)"));
    KnownProtocols.insert(std::make_pair(108, L"IPComp (IP Payload Compression Protocol)"));
    KnownProtocols.insert(std::make_pair(109, L"SNP (Sitara Networks Protocol)"));
    KnownProtocols.insert(std::make_pair(110, L"Compaq-Peer (Compaq Peer Protocol)"));
    KnownProtocols.insert(std::make_pair(111, L"IPX-in-IP (IPX in IP)"));
    KnownProtocols.insert(std::make_pair(112, L"VRRP (Virtual Router Redundancy Protocol)"));
    KnownProtocols.insert(std::make_pair(113, L"PGM (PGM Reliable Transport Protocol)"));
    KnownProtocols.insert(std::make_pair(114, L"any 0-hop protocol"));
    KnownProtocols.insert(std::make_pair(115, L"L2TP (Layer Two Tunneling Protocol)"));
    KnownProtocols.insert(std::make_pair(116, L"DDX (D-II Data Exchange (DDX))"));
    KnownProtocols.insert(std::make_pair(117, L"IATP (Interactive Agent Transfer Protocol)"));
    KnownProtocols.insert(std::make_pair(118, L"STP (Schedule Transfer Protocol)"));
    KnownProtocols.insert(std::make_pair(119, L"SRP (SpectraLink Radio Protocol)"));
    KnownProtocols.insert(std::make_pair(120, L"UTI"));
    KnownProtocols.insert(std::make_pair(121, L"SMP (Simple Message Protocol)"));
    KnownProtocols.insert(std::make_pair(122, L"SM"));
    KnownProtocols.insert(std::make_pair(123, L"PTP (Performance Transparency Protocol)"));
    KnownProtocols.insert(std::make_pair(124, L"ISIS over IPv4"));
    KnownProtocols.insert(std::make_pair(125, L"FIRE"));
    KnownProtocols.insert(std::make_pair(126, L"CRTP (Combat Radio Transport Protocol)"));
    KnownProtocols.insert(std::make_pair(127, L"CRUDP (Combat Radio User Datagram)"));
    KnownProtocols.insert(std::make_pair(128, L"SSCOPMCE"));
    KnownProtocols.insert(std::make_pair(129, L"IPLT"));
    KnownProtocols.insert(std::make_pair(130, L"SPS (Secure Packet Shield)"));
    KnownProtocols.insert(std::make_pair(131, L"PIPE (Private IP Encapsulation within IP)"));
    KnownProtocols.insert(std::make_pair(132, L"SCTP (Stream Control Transmission Protocol)"));
    KnownProtocols.insert(std::make_pair(133, L"FC (Fibre Channel)"));
    KnownProtocols.insert(std::make_pair(134, L"RSVP-E2E-IGNORE"));
    KnownProtocols.insert(std::make_pair(135, L"Mobility Header"));
    KnownProtocols.insert(std::make_pair(136, L"UDPLite"));
    KnownProtocols.insert(std::make_pair(137, L"MPLS-in-IP"));
    KnownProtocols.insert(std::make_pair(138, L"manet (MANET Protocols)"));
    KnownProtocols.insert(std::make_pair(139, L"HIP (Host Identity Protocol)"));
    KnownProtocols.insert(std::make_pair(140, L"Shim6 (Shim6 Protocol)"));
    KnownProtocols.insert(std::make_pair(141, L"WESP (Wrapped Encapsulating Security Payload)"));
    KnownProtocols.insert(std::make_pair(142, L"ROHC (Robust Header Compression)"));
    return KnownProtocols;
}();

const std::map<uint32, std::wstring> g_KnownIcmp4Types = [] {
    std::map<uint32, std::wstring> KnownIcmpTypes;
    KnownIcmpTypes.insert(std::make_pair(0,L"Echo Reply"));
    KnownIcmpTypes.insert(std::make_pair(3,L"Destination Unreachable"));
    KnownIcmpTypes.insert(std::make_pair(4,L"Source Quench"));
    KnownIcmpTypes.insert(std::make_pair(5,L"Redirect"));
    KnownIcmpTypes.insert(std::make_pair(8,L"Echo Request"));
    KnownIcmpTypes.insert(std::make_pair(9,L"Router Advertisement"));
    KnownIcmpTypes.insert(std::make_pair(10,L"Router Solicitation"));
    KnownIcmpTypes.insert(std::make_pair(11,L"Time Exceeded"));
    KnownIcmpTypes.insert(std::make_pair(12,L"Parameter Problem"));
    KnownIcmpTypes.insert(std::make_pair(13,L"Timestamp (erleichtert die Zeitsynchronisation)"));
    KnownIcmpTypes.insert(std::make_pair(14,L"Timestamp Reply"));
    KnownIcmpTypes.insert(std::make_pair(15,L"Information Request"));
    KnownIcmpTypes.insert(std::make_pair(16,L"Information Reply"));
    KnownIcmpTypes.insert(std::make_pair(17,L"Address Mask Request"));
    KnownIcmpTypes.insert(std::make_pair(18,L"Address Mask Reply"));
    KnownIcmpTypes.insert(std::make_pair(19,L"Reserved (for Security)"));
    KnownIcmpTypes.insert(std::make_pair(30,L"Traceroute"));
    KnownIcmpTypes.insert(std::make_pair(31,L"Datagram Conversion Error"));
    KnownIcmpTypes.insert(std::make_pair(32,L"Mobile Host Redirect"));
    KnownIcmpTypes.insert(std::make_pair(33,L"Ursprünglich IPv6 Where-Are-You (ersetzt durch ICMPv6)"));
    KnownIcmpTypes.insert(std::make_pair(34,L"Ursprünglich IPv6 I-Am-Here (ersetzt durch ICMPv6)"));
    KnownIcmpTypes.insert(std::make_pair(35,L"Mobile Registration Request"));
    KnownIcmpTypes.insert(std::make_pair(36,L"Mobile Registration Reply"));
    KnownIcmpTypes.insert(std::make_pair(37,L"Domain Name Request"));
    KnownIcmpTypes.insert(std::make_pair(38,L"Domain Name Reply"));
    KnownIcmpTypes.insert(std::make_pair(39,L"SKIP"));
    KnownIcmpTypes.insert(std::make_pair(40,L"Photuris"));
    KnownIcmpTypes.insert(std::make_pair(41,L"ICMP messages utilized by experimental mobility protocols such as Seamoby"));
    return KnownIcmpTypes;
}();

const std::map<uint32, std::wstring> g_KnownIcmp6Types = [] {
    std::map<uint32, std::wstring> KnownIcmpTypes;
    KnownIcmpTypes.insert(std::make_pair(1,L"Destination Unreachable"));
    KnownIcmpTypes.insert(std::make_pair(2,L"Packet Too Big"));
    KnownIcmpTypes.insert(std::make_pair(3,L"Time Exceeded"));
    KnownIcmpTypes.insert(std::make_pair(4,L"Parameter Problem"));
    KnownIcmpTypes.insert(std::make_pair(128,L"Echo Request"));
    KnownIcmpTypes.insert(std::make_pair(129,L"Echo Reply"));
    KnownIcmpTypes.insert(std::make_pair(130,L"Multicast Listener Query"));
    KnownIcmpTypes.insert(std::make_pair(131,L"Version 1 Multicast Listener Report"));
    KnownIcmpTypes.insert(std::make_pair(132,L"Multicast Listener Done"));
    KnownIcmpTypes.insert(std::make_pair(133,L"Router Solicitation"));
    KnownIcmpTypes.insert(std::make_pair(134,L"Router Advertisement"));
    KnownIcmpTypes.insert(std::make_pair(135,L"Neighbor Solicitation"));
    KnownIcmpTypes.insert(std::make_pair(136,L"Neighbor Advertisement"));
    KnownIcmpTypes.insert(std::make_pair(137,L"Redirect"));
    KnownIcmpTypes.insert(std::make_pair(138,L"Router Renumbering"));
    KnownIcmpTypes.insert(std::make_pair(139,L"ICMP Node Information Query"));
    KnownIcmpTypes.insert(std::make_pair(140,L"ICMP Node Information Response"));
    KnownIcmpTypes.insert(std::make_pair(141,L"Inverse Neighbor Discovery Solicitation Message"));
    KnownIcmpTypes.insert(std::make_pair(142,L"Inverse Neighbor Discovery Advertisement Message"));
    KnownIcmpTypes.insert(std::make_pair(143,L"Version 2 Multicast Listener Report"));
    KnownIcmpTypes.insert(std::make_pair(144,L"Home Agent Address Discovery Request Message"));
    KnownIcmpTypes.insert(std::make_pair(145,L"Home Agent Address Discovery Reply Message"));
    KnownIcmpTypes.insert(std::make_pair(146,L"Mobile Prefix Solicitation"));
    KnownIcmpTypes.insert(std::make_pair(147,L"Mobile Prefix Advertisement"));
    KnownIcmpTypes.insert(std::make_pair(148,L"Certification Path Solicitation Message"));
    KnownIcmpTypes.insert(std::make_pair(149,L"Certification Path Advertisement Message"));
    KnownIcmpTypes.insert(std::make_pair(150,L"ICMP messages utilized by experimental mobility protocols such as Seamoby"));
    KnownIcmpTypes.insert(std::make_pair(151,L"Multicast Router Advertisement"));
    KnownIcmpTypes.insert(std::make_pair(152,L"Multicast Router Solicitation"));
    KnownIcmpTypes.insert(std::make_pair(153,L"Multicast Router Termination"));
    KnownIcmpTypes.insert(std::make_pair(155,L"RPL Control Message"));
    return KnownIcmpTypes;
}();

std::wstring Protocol2Str(uint32 Protocol)
{
    /*switch (Protocol)
    {
        case 0: return L"HOPOPT";
        case 1: return L"ICMP";
        case 2: return L"IGMP";
        case 3: return L"GGP";
        case 4: return L"IP";
        //case 5: return L"Stream";
        case 6: return L"TCP";
        case 7: return L"CBT";
        case 8: return L"EGP";
        case 9: return L"IGP";
        case 10: return L"BBN-RCC-MON";
        case 11: return L"NVP-II";
        case 12: return L"PUP";
        case 13: return L"ARGUS";
        case 14: return L"EMCON";
        case 15: return L"XNET";
        case 16: return L"CHAOS";
        case 17: return L"UDP";
        //case 18: return L"Multiplexing";
        case 19: return L"DCN-MEAS";
        case 20: return L"HMP";
        case 21: return L"PRM";
        case 22: return L"XNS-IDP";
        case 23: return L"TRUNK-1";
        case 24: return L"TRUNK-2";
        case 25: return L"LEAF-1";
        case 26: return L"LEAF-2";
        case 27: return L"RDP";
        case 28: return L"IRTP";
        case 29: return L"ISO-TP4";
        case 30: return L"NETBLT";
        case 31: return L"MFE-NSP";
        case 32: return L"MERIT-INP";
        case 33: return L"DCCP";
        case 34: return L"3PC";
        case 35: return L"IDPR";
        case 36: return L"XTP";
        case 37: return L"DDP";
        case 38: return L"IDPR-CMTP";
        case 39: return L"TP++";
        case 40: return L"IL";
        ///case 41: return L"Verkapselung von IPv6- in IPv4-Pakete";
        case 42: return L"SDRP";
        case 43: return L"IPv6-Route";
        case 44: return L"IPv6-Frag";
        case 45: return L"IDRP";
        case 46: return L"RSVP";
        case 47: return L"GRE";
        case 48: return L"MHRP";
        case 49: return L"BNA";
        case 50: return L"ESP";
        case 51: return L"AH";
        case 52: return L"I-NLSP";
        case 53: return L"SWIPE";
        case 54: return L"NARP";
        case 55: return L"MOBILE";
        case 56: return L"TLSP";
        case 57: return L"SKIP";
        case 58: return L"IPv6-ICMP";
        case 59: return L"IPv6-NoNxt";
        case 60: return L"IPv6-Opts";
        //case 61: return L"Jedes Host-interne Protokoll";
        case 62: return L"CFTP";
        //case 63: return L"Jedes lokale Netz";
        case 64: return L"SAT-EXPAK";
        case 65: return L"KRYPTOLAN";
        case 66: return L"RVD";
        case 67: return L"IPPC";
        //case 68: return L"Jedes verteilte Dateisystem";
        case 69: return L"SAT-MON";
        case 70: return L"VISA";
        case 71: return L"IPCV";
        case 72: return L"CPNX";
        case 73: return L"CPHB";
        case 74: return L"WSN";
        case 75: return L"PVP";
        case 76: return L"BR-SAT-MON";
        case 77: return L"SUN-ND";
        case 78: return L"WB-MON";
        case 79: return L"WB-EXPAK";
        case 80: return L"ISO-IP";
        case 81: return L"VMTP";
        case 82: return L"SECURE-VMTP";
        case 83: return L"VINES";
        case 84: return L"TTP";
        case 85: return L"NSFNET-IGP";
        case 86: return L"DGP";
        case 87: return L"TCF";
        case 88: return L"EIGRP";
        case 89: return L"OSPF";
        case 90: return L"Sprite-RPC";
        case 91: return L"LARP";
        case 92: return L"MTP";
        case 93: return L"AX.25";
        case 94: return L"IPIP";
        case 95: return L"MICP";
        case 96: return L"SCC-SP";
        case 97: return L"ETHERIP";
        case 98: return L"ENCAP";
        //case 99: return L"Jeder private Verschlüsselungsentwurf";
        case 100: return L"GMTP";
        case 101: return L"IFMP";
        case 102: return L"PNNI";
        case 103: return L"PIM";
        case 104: return L"ARIS";
        case 105: return L"SCPS";
        case 106: return L"QNX";
        case 107: return L"A/N";
        case 108: return L"IPComp";
        case 109: return L"SNP";
        case 110: return L"Compaq-Peer";
        case 111: return L"IPX-in-IP";
        case 112: return L"VRRP";
        case 113: return L"PGM";
        case 114: return L"any 0-hop protocol";
        case 115: return L"L2TP";
        case 116: return L"DDX";
        case 117: return L"IATP";
        case 118: return L"STP";
        case 119: return L"SRP";
        case 120: return L"UTI";
        case 121: return L"SMP";
        case 122: return L"SM";
        case 123: return L"PTP";
        case 124: return L"ISIS";
        case 125: return L"FIRE";
        case 126: return L"CRTP";
        case 127: return L"CRUDP";
        case 128: return L"SSCOPMCE";
        case 129: return L"IPLT";
        case 130: return L"SPS";
        case 131: return L"PIPE";
        case 132: return L"SCTP";
        case 133: return L"FC";
        case 134: return L"RSVP-E2E-IGNORE";
        case 135: return L"Mobility Header";
        case 136: return L"UDPLite";
        case 137: return L"MPLS-in-IP";
        case 138: return L"manet";
        case 139: return L"HIP";
        case 140: return L"Shim6";
        case 141: return L"WESP";
        case 142: return L"ROHC";
        case 256: return L"???";
        default: return L"#" + std::to_wstring(Protocol);
    }*/

    return L"#" + std::to_wstring(Protocol);
}